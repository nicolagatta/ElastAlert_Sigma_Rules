##############################################################################
# Notes:
# - this setup requires an Elastic server using SSL/TLS certificates
# - Parameter with __anything__  needs to be customized (hostnames, users ...)
##############################################################################

# This is the folder that contains the rule yaml files
# Any .yaml file will be loaded as a rule
rules_folder: /etc/elastalert/rules/

# How often ElastAlert will query Elasticsearch
# The unit can be anything from weeks to seconds
run_every:
  minutes: 1

# ElastAlert will buffer results from the most recent
# period of time, in case some log sources are not in real time
buffer_time:
  minutes: 15

# The Elasticsearch hostname for metadata writeback
# Note that every rule can have its own Elasticsearch host
es_host: __yourelasticserver__

# The Elasticsearch port
es_port: 9200

# Connect with TLS to Elasticsearch
use_ssl: True

# Verify TLS certificates
#verify_certs: False

# Option basic-auth username and password for Elasticsearch
es_username: __yourElasticusername__
es_password: __yourElasticpassword__

# Use SSL authentication with client certificates client_cert must be
# a pem file containing both cert and key for client
verify_certs: True
ca_certs: /etc/elastalert/es-ca.pem

client_cert: /etc/elastalert/elastalert.pem
client_key: /etc/elastalert/elastalert.key

# The index on es_host which is used for metadata storage
# This can be a unmapped index, but it is recommended that you run
# elastalert-create-index to set a mapping
writeback_index: elastalert_status
writeback_alias: elastalert_alerts

# If an alert fails for some reason, ElastAlert will retry
# sending the alert until this time period has elapsed
alert_time_limit:
  days: 2
